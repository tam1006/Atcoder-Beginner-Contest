#!/usr/bin/env python3
import sys

sys.setrecursionlimit(10**7)
input = lambda: sys.stdin.readline().rstrip()
from functools import lru_cache

import platform
if platform.python_implementation() == 'PyPy':
    import pypyjit
    pypyjit.set_param('max_unroll_recursion=-1')


# def solve(N: int, B: int, Q: int, a: List[int], c: List[int], x: List[int]) -> List[str]:
def solve(N, B, Q, a, c, x):
    pass  # TODO: edit here


# generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
def main():
    import sys
    tokens = iter(sys.stdin.read().split())
    N = int(next(tokens))
    B = int(next(tokens))
    Q = int(next(tokens))
    a = [None for _ in range(N)]
    c = [None for _ in range(Q)]
    x = [None for _ in range(Q)]
    for i in range(N):
        a[i] = int(next(tokens))
    for i in range(Q):
        c[i] = int(next(tokens))
        x[i] = int(next(tokens))
    assert next(tokens, None) is None
    b = solve(N, B, Q, a, c, x)
    for i in range(Q):
        print(b[i])


if __name__ == '__main__':
    main()
