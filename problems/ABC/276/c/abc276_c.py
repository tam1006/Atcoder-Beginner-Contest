#!/usr/bin/env python3
# from typing import *
import bisect

# def solve(N: int, P: List[int]) -> List[str]:
def solve(N, P):
    tmp = []
    for i in range(N-1, 0, -1):
        tmp.append(P[i])
        if P[i-1] > P[i]:
            tmp = tmp[::-1]
            n = bisect.bisect_left(tmp, P[i-1])
            tmp.insert(n, P[i-1])
            t = tmp.pop(n-1)
            ans = P[:i-1] +[t] + tmp[::-1]
            return ans
        


# generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
def main():
    import sys
    tokens = iter(sys.stdin.read().split())
    N = int(next(tokens))
    P = [None for _ in range(N)]
    for i in range(N):
        P[i] = int(next(tokens))
    assert next(tokens, None) is None
    ans = solve(N, P)
    print(*[ans[i] for i in range(N)])


if __name__ == '__main__':
    main()
