#!/usr/bin/env python3
# from typing import *
import sys

sys.setrecursionlimit(10**7)
from functools import lru_cache

from collections import deque

def solve(M, u, v):
    global edges, score
    edges = [[] for _ in range(N)]

    for i in range(M):
        edges[u[i]-1].append(v[i]-1)
        edges[v[i]-1].append(u[i]-1)

    score = [[float('inf')]*N for _ in range(N)]
    score[0][N-1] = 0

    que = deque()
    que.append((0, N-1))

    while que:
        x, y = que.popleft()

        for i in edges[x]:
            for j in edges[y]:
                if score[i][j] == float('inf') and i != j and C[i] != C[j]:
                    score[i][j] = score[x][y] + 1
                    que.append((i, j))


    if score[N-1][0] == float('inf'):
        return -1
    else:
        return score[N-1][0]


# generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
def main():
    global N, C
    T = int(input())
    for i in range(T):
        N, M = map(int, input().split())
        C = list(map(int, input().split()))
        u, v = [], []
        for _ in range(M):
            u_, v_ = map(int, input().split())
            u.append(u_)
            v.append(v_)

        print(solve(M, u, v))

if __name__ == '__main__':
    main()
