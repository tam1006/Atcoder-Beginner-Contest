#!/usr/bin/env python3
# from typing import *
import sys

sys.setrecursionlimit(10**7)
from functools import lru_cache

from collections import defaultdict
import bisect


# def solve(N: int, A: List[int]) -> int:
def solve(N, A):
    ans = 0

    d = defaultdict(list)
    for i, a in enumerate(A):
        d[a].append(i)

    for key in d:
        d[key].sort()

    for l in range(N):
        # for r in range(l+1, N):
            # if A[l] != A[r]:
                # ans += min(l+1, N-r)

        index_l = bisect.bisect_left(d[A[l]], l)
        index_r = bisect.bisect_right(d[A[l]], N-l-1)
        # ans += index_r - index_l
        ans += (l+1)* ((N-l-1) - l - (index_r - index_l))

        


    return ans



# generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
def main():
    import sys
    tokens = iter(sys.stdin.read().split())
    N = int(next(tokens))
    A = [None for _ in range(N)]
    for i in range(N):
        A[i] = int(next(tokens))
    assert next(tokens, None) is None
    a = solve(N, A)
    print(a)


if __name__ == '__main__':
    main()
