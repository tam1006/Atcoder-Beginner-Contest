#!/usr/bin/env python3
# from typing import *
import sys

sys.setrecursionlimit(10**7)
from functools import lru_cache


# def solve(N: int, M: int, A: List[int], B: List[int]) -> int:
def solve(N, M, A, B):
    import heapq

    A, B = zip(*sorted(zip(A, B), key=lambda x: (x[0], -x[1])))
    from collections import deque

    A = deque(A)
    B = deque(B)

    ans = 0
    deq = []
    for i in range(1, M+1):
        while True:
            if len(A) > 0 and A[0] <= i:
                heapq.heappush(deq, -B[0])
                # A = A[1:]
                # B = B[1:]
                A.popleft()
                B.popleft()
            else:
                break

        if len(deq) > 0:
            ans += -heapq.heappop(deq)


    return ans

# generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
def main():
    N, M = map(int, input().split())
    A = [None for _ in range(N)]
    B = [None for _ in range(N)]
    for i in range(N):
        A[i], B[i] = map(int, input().split())
    a = solve(N, M, A, B)
    print(a)


if __name__ == '__main__':
    main()
