#!/usr/bin/env python3
# from typing import *
from collections import defaultdict
import sys
sys.setrecursionlimit(10**5)
from functools import lru_cache

class UnionFind():
    def __init__(self, n):
        self.n = n
        self.parents = [-1] * n

    def find(self, x):
        if self.parents[x] < 0:
            return x
        else:
            self.parents[x] = self.find(self.parents[x])
            return self.parents[x]

    def union(self, x, y):
        x = self.find(x)
        y = self.find(y)

        if x == y:
            return

        if self.parents[x] > self.parents[y]:
            x, y = y, x

        self.parents[x] += self.parents[y]
        self.parents[y] = x

    def size(self, x):
        return -self.parents[self.find(x)]

    def same(self, x, y):
        return self.find(x) == self.find(y)

    def members(self, x):
        root = self.find(x)
        return [i for i in range(self.n) if self.find(i) == root]

    def roots(self):
        return [i for i, x in enumerate(self.parents) if x < 0]

    def group_count(self):
        return len(self.roots())

    def all_group_members(self):
        group_members = defaultdict(list)
        for member in range(self.n):
            group_members[self.find(member)].append(member)
        return group_members

    def __str__(self):
        return '\n'.join(f'{r}: {m}' for r, m in self.all_group_members().items())


# def solve(N: int, M: int, Q: int, A: List[int], B: List[int], C: List[int], X: List[int], Y: List[int]) -> List[str]:
def solve(N, M, Q, X, Y):
    global d
    d = [None] * N
    for root in uf.roots():
        d[root] = 0
        dfs(root)

    ans = [None for _ in range(Q)]
    for i in range(Q):
        if uf.same(X[i], Y[i]):
            if d[uf.find(X[i])] == 1e16:
                ans[i] = 'inf'
            else:
                ans[i] = -(d[Y[i]] - d[X[i]])
        else:
            ans[i] = 'nan'

    return ans

@lru_cache(maxsize=None)
def dfs(u):
    for v, c in lines[u]:
        if d[uf.find(v)] == 1e16:
            return -1
        if d[v] is not None:
            if d[v] != d[u] + c:
                d[uf.find(v)] = 1e16
                return -1
        else:
            d[v] = d[u] + c
            if dfs(v) == -1:
                return -1


# generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
def main():
    global uf, lines
    N, M, Q = map(int, input().split())
    uf = UnionFind(N)
    X = [None for _ in range(Q)]
    Y = [None for _ in range(Q)]
    # lines = defaultdict(list)
    lines = [[] for _ in range(N)]
    for i in range(M):
        a, b, c = map(int, input().split())
        a -= 1
        b -= 1
        lines[a].append((b, -c))
        lines[b].append((a, c))
        uf.union(a, b)
    for i in range(Q):
        x, y = map(int, input().split())
        X[i] = x-1
        Y[i] = y-1
    a = solve(N, M, Q, X, Y)
    for i in range(Q):
        print(a[i])


if __name__ == '__main__':
    main()
