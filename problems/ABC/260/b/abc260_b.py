#!/usr/bin/env python3
# from typing import *


# def solve(N: int, X: int, Y: int, Z: int, A: List[int], B: List[int]) -> Tuple[List[str], List[str], str]:
def solve(N, X, Y, Z, A, B):
    AB = [[a, b, -i] for i, (a, b) in enumerate(zip(A, B))]
    AB.sort(key=lambda x: (x[0], x[2]), reverse=True)

    ans = []
    for i in range(X):
        ans.append(-AB[i][2]+1)

    AB = AB[X:]
    AB.sort(key=lambda x: (x[1], x[2]), reverse=True)

    for i in range(Y):
        ans.append(-AB[i][2]+1)

    AB = AB[Y:]
    S = []
    for a, b, i in AB:
        S.append((a+b, i))

    S.sort(key=lambda x: (x[0], x[1]), reverse=True)

    for i in range(Z):
        ans.append(-S[i][1]+1)

    ans.sort()
    return ans



# generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
def main():
    import sys
    tokens = iter(sys.stdin.read().split())
    N = int(next(tokens))
    X = int(next(tokens))
    Y = int(next(tokens))
    Z = int(next(tokens))
    A = [None for _ in range(N)]
    B = [None for _ in range(N)]
    for i in range(N):
        A[i] = int(next(tokens))
    for i in range(N):
        B[i] = int(next(tokens))
    assert next(tokens, None) is None
    d = solve(N, X, Y, Z, A, B)
    for i in range(len(d)):
        print(d[i])


if __name__ == '__main__':
    main()
