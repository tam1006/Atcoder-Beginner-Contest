#!/usr/bin/env python3
# from typing import *


def solve(H, W, rs, cs, N, r, c, Q, d, l):
    from collections import defaultdict
    import bisect

    A = defaultdict(list)
    B = defaultdict(list)

    for i in range(N):
        bisect.insort_left(A[r[i]], c[i])
        bisect.insort_left(B[c[i]], r[i])

    for i in range(Q):
        if d[i] == 'L':
            idx = bisect.bisect_left(A[rs], cs)
            if idx == 0:
                cs = max(1, cs - l[i])
            else:
                cs = max(A[rs][idx - 1]+1, cs - l[i])

        elif d[i] == 'R':
            idx = bisect.bisect_right(A[rs], cs)
            if idx == len(A[rs]):
                cs = min(W, cs + l[i])
            else:
                cs = min(A[rs][idx]-1, cs + l[i])

        elif d[i] == 'U':
            idx = bisect.bisect_left(B[cs], rs)
            if idx == 0:
                rs = max(1, rs - l[i])
            else:
                rs = max(B[cs][idx - 1]+1, rs - l[i])

        elif d[i] == 'D':
            idx = bisect.bisect_right(B[cs], rs)
            if idx == len(B[cs]):
                rs = min(H, rs + l[i])
            else:
                rs = min(B[cs][idx]-1, rs + l[i])

        print(rs, cs)

# generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
def main():
    H, W, rs, cs = map(int, input().split())
    N = int(input())
    r, c = [], []
    for _ in range(N):
        r_, c_ = map(int, input().split())
        r.append(r_)
        c.append(c_)
    Q = int(input())
    d, l = [], []
    for _ in range(Q):
        d_, l_ = input().split()
        d.append(d_)
        l.append(int(l_))

    solve(H, W, rs, cs, N, r, c, Q, d, l)


if __name__ == '__main__':
    main()
