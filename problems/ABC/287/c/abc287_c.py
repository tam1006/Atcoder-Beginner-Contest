#!/usr/bin/env python3
# from typing import *
import sys

sys.setrecursionlimit(10**7)

YES = 'Yes'
NO = 'No'


# def solve(N: str, M: str, u: List[str], v: List[str]) -> str:
def solve(N, M, u, v):
    if M != N-1:
        return NO

    edges = [[] for _ in range(N)]
    for i in range(M):
        edges[int(u[i])-1].append(int(v[i])-1)
        edges[int(v[i])-1].append(int(u[i])-1)

    s = -1
    for i in range(N):
        if len(edges[i]) == 1:
            s = i
            break

    if s == -1:
        return NO

    visited = [False for _ in range(N)]
    visited[s] = True

    from collections import deque
    q = deque()
    q.append(s)

    s_before = s
    n = 1
    while q:
        s = q.popleft()
        next = []
        for t in edges[s]:
            if t == s_before:
                continue
            if visited[t]:
                return NO
            next.append(t)

        if len(next) != 1:
            return NO

        visited[next[0]] = True
        q.append(next[0])
        n += 1

        if n == N:
            break

        s_before = s

    for i in range(N):
        if not visited[i]:
            return NO

    return YES


# generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
def main():
    N, M = map(int, input().split())
    u, v = [], []
    for _ in range(M):
        u_, v_ = input().split()
        u.append(u_)
        v.append(v_)
    a = solve(N, M, u, v)
    print(a)


if __name__ == '__main__':
    main()
