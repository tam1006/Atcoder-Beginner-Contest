#!/usr/bin/env python3
# from typing import *
import sys
sys.setrecursionlimit(10 ** 6)


class UnionFind():
    def __init__(self, n):
        self.n = n
        self.parents = [-1] * (n+1)
        self.child = [-1] * (n+1)

    def find(self, x):
        if self.parents[x] < 0:
            return x
        else:
            return self.find(self.parents[x])

    def union(self, x, y):
        self.parents[y] = x
        self.child[x] = y

    def separate(self, x, y):
        self.child[x] = -1
        self.parents[y] = -1

    def members(self, x):
        x = self.find(x)
        members = [0]
        while True:
            members.append(x)
            if self.child[x] < 0:
                break
            x = self.child[x]
        members[0] = len(members) - 1
        return members


# def solve(n: int, a: List[int]) -> Tuple[str, List[str]]:
def solve(N, Q, q):
    uf = UnionFind(N)

    ans = []
    for i in range(Q):
        if q[i][0] == '1':
            uf.union(int(q[i][1]), int(q[i][2]))
        elif q[i][0] == '2':
            uf.separate(int(q[i][1]), int(q[i][2]))
        else:
            ans.append(uf.members(int(q[i][1])))

    return ans



# generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
def main():
    N, Q = map(int, input().split())
    q = list(list(input().split()) for _ in range(Q))
    a = solve(N, Q, q)
    for i in a:
        print(*i)

if __name__ == '__main__':
    main()
