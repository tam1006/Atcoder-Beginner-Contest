# Rolling Hash

# 2^61 - 1 をmodとしたRolling Hash
# https://qiita.com/keymoon/items/11fac5627672a6d6a9f6
class RollingHash_61:
    def __init__(self, S):
        self.MASK30 = (1 << 30) - 1
        self.MASK31 = (1 << 31) - 1
        self.MASK61 = (1 << 61) - 1
        self.POSITIVIZER = self.MASK61 * ((1 << 3) - 1)

        # 文字列Sを整数に変換する
        S = [ord(i) for i in S]
        l = len(S)
        self.base = 37
        self.mod = self.MASK61
        self.pow = [1]*(l+1)

        # 区間[0, i)のハッシュ値を計算しておく
        # 任意区間[l, r) = [0, r) - [0, l)
        self.hash = [0]*(l+1)
        for i in range(l):
            self.pow[i+1] = self.calcMod(self.mul(self.pow[i], self.base))
            self.hash[i+1] = self.calcMod(self.mul(self.hash[i], self.base) + S[i])

    def mul(self, a, b):
        ua = a >> 31
        da = a & self.MASK31
        ub = b >> 31
        db = b & self.MASK31

        mid = da * ub + ua * db
        umid = mid >> 30
        dmid = mid & self.MASK30

        return ua * ub * 2 + umid + (dmid << 31) + da * db


    def calcMod(self, x):
        xu = x >> 61
        xd = x & self.MASK61
        res = xu + xd
        if res >= self.mod:
            res -= self.mod
        return res
        

    def get(self, l, r):
        # 区間[l,r)のハッシュ値を返す
        return self.calcMod(self.hash[r] + self.POSITIVIZER - self.mul(self.hash[l], self.pow[r-l]))

    def is_same(self, l1, r1, l2, r2):
        # 2つの区間[l1,r1)と[l2,r2)のハッシュ値を比較。同じであれば一致
        if self.get(l1, r1) == self.get(l2, r2):
            return True
        else:
            return False

# def solve(N: int, T: str) -> Any:
def solve(N, T):
    r = RollingHash_61(T)
    r_inv = RollingHash_61(T[::-1])

    for i in range(N+1):
        if i == 0:
            # if r.get(N, 2*N) == r_inv.get(N, 2*N):
            h1 = r.get(N, 2*N)
            h2 = r_inv.get(N, 2*N)
            if h1 == h2:
                print(T[N:])
                print(0)
                return
        elif i == N:
            # if r.get(0, N) == r_inv.get(0, N):
            h1 = r.get(0, N)
            h2 = r_inv.get(0, N)
            if h1 == h2:
                print(T[:N])
                print(N)
                return
        else:
            l1, r1 = 0, i
            l2, r2 = N-i, N

            l3, r3 = N+i, 2*N
            l4, r4 = N, 2*N-i

            h1 = r.get(l1, r1)
            h2 = r_inv.get(l2, r2)

            h3 = r.get(l3, r3)
            h4 = r_inv.get(l4, r4)

            # if r.get(l1, r1) == r_inv.get(l2, r2) and r.get(l3, r3) == r_inv.get(l4, r4):
            if h1 == h2 and h3 == h4:
                print(T[i:i+N][::-1])
                print(i)
                return

    print(-1)
    return

# generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
def main():
    N = int(input())
    T = input()
    solve(N, T)


if __name__ == '__main__':
    main()
