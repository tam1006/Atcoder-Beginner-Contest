#!/usr/bin/env python3
# from typing import *

from collections import defaultdict

# def solve(N: int, M: int, u: List[int], v: List[int]) -> int:
def solve(N, M, u, v):
    from collections import deque

    G = defaultdict(list)
    for i in range(M):
        G[u[i]-1].append(v[i]-1)
        G[v[i]-1].append(u[i]-1)

    i = 0
    color_i = 1
    color = [0 for _ in range(N)]
    plus_nums = [0]
    minus_nums = [0]
    while i < N:
        if color[i] != 0:
            i += 1
            continue

        que = deque()
        color[i] = color_i
        que.append(i)

        bipartite = True
        plus_num = 1
        minus_num = 0
        while que:
            p = que.popleft()
            for q in G[p]:
                if color[q] == 0:
                    color[q] = -color[p]
                    if color[q] > 0:
                        plus_num += 1
                    else:
                        minus_num += 1
                    que.append(q)
                elif color[q] == color[p]:
                    bipartite = False
                    break

        if not bipartite:
            return 0

        color_i += 1
        i += 1
        plus_nums.append(plus_num)
        minus_nums.append(minus_num)

    ans = 0
    for i in range(N):
        if color[i] > 0:
            # ans += minus_num - len(G[i]) + N - size
            ans += minus_nums[color[i]] - len(G[i]) + N - plus_nums[color[i]] - minus_nums[color[i]]
        else:
            # ans += plus_num - len(G[i]) + N - size
            ans += plus_nums[-color[i]] - len(G[i]) + N - plus_nums[-color[i]] - minus_nums[-color[i]]

    return ans // 2
    


# generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
def main():
    N, M = map(int, input().split())
    u = [None for _ in range(M)]
    v = [None for _ in range(M)]
    for i in range(M):
        u[i], v[i] = map(int, input().split())
    a = solve(N, M, u, v)
    print(a)


if __name__ == '__main__':
    main()
