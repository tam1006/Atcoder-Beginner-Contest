#!/usr/bin/env python3
# from typing import *
from collections import deque

MOD = 1000000007


# def solve(N: str, M: str, A: List[str], B: List[str]) -> int:
def solve(N, graph):
    see = deque()
    see.append(0)
    count = [0]*N
    count[0] = 1
    path = [-1]*N
    path[0] = 0

    while see:
        v = see.popleft()
 
        for w in graph[v]:
            # if w not in see:
                # see.append(w)
                # count[w] = count[v]
                # path[w] = path[v] + 1
            if path[w] == -1 or path[w] > path[v] + 1:
                see.append(w)
                count[w] = count[v]
                path[w] = path[v] + 1
            elif path[w] == path[v] + 1:
                count[w] += count[v]
                count[w] %= MOD
    return count[N-1]

# generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
def main():
    N, M = map(int, input().split())
    graph = [[] for _ in range(N)]
    for _ in range(M):
        A, B = map(int, input().split())
        graph[A-1].append(B-1)
        graph[B-1].append(A-1)

    a = solve(N, graph)
    print(a)


if __name__ == '__main__':
    main()
